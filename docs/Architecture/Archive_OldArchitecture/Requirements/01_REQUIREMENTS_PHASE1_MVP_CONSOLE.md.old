title: "Requirements: MVP - Core API & Internal Integration"
description: Minimum requirements for the Nucleus core API service and its validation via internal integration mechanisms and direct API testing.
version: 1.5
date: 2025-05-06

# Requirements: MVP - Core API & Internal Integration

**Version:** 1.5
**Date:** 2025-05-06

## 1. Goal

To establish and validate the core backend architecture (`Nucleus.ApiService`) for Nucleus, including persona integration (`BootstrapperPersona`) and basic data flow (query, simple ingestion placeholder). This MVP utilizes **internal integration mechanisms (e.g., leveraging the `Nucleus.Infrastructure.Adapters.Local` for specific system tasks) and direct API testing** to interact with and test the API, prioritizing development velocity and synergy with agentic development workflows. The local development environment using **.NET Aspire** with emulated services remains critical.

## 2. Scope

*   **Core Deliverable:** `Nucleus.ApiService` ASP.NET Core Web API providing foundational endpoints.
*   **Initial Validation:** Primarily through direct API testing and internal service integrations (e.g., using `LocalAdapter`).
*   **Interaction:** A unified API endpoint (`/api/v1/interactions`) for submitting queries and context (e.g., file references), consumed by internal services or test clients.
*   **Backend:** `Nucleus.ApiService` ASP.NET Core Web API providing endpoints.
*   **Processing:** Basic query handling by a single `BootstrapperPersona`. Placeholder for content processing triggered via interactions.
*   **Data Storage:** Basic storage for persona knowledge entries (Cosmos DB emulator).
*   **Environment:** Local development using .NET Aspire, orchestrating the API and the essential emulated Azure service (Cosmos DB). Processing uses ephemeral container storage, not external blobs.

## 3. Requirements

### 3.1. Local Development Environment (Aspire)

*   **REQ-MVP-ENV-001:** The `.NET Aspire` AppHost (`Nucleus.AppHost`) MUST successfully launch and orchestrate the following essential components:
    *   `Nucleus.ApiService` project.
    *   Azure Cosmos DB Emulator container.
*   **REQ-MVP-ENV-002:** Aspire MUST correctly inject necessary connection strings and service discovery information (e.g., API base URL, Cosmos connection) into `Nucleus.ApiService` via configuration/environment variables.
*   **REQ-MVP-ENV-003:** Developers MUST be able to run the entire MVP stack locally using a single command (e.g., `dotnet run` in the AppHost directory).

### 3.2. Admin Experience (Configuration)

*   **REQ-MVP-ADM-001:** An Administrator (developer during MVP) MUST be able to configure necessary connection details/credentials for external services not managed by Aspire emulators, primarily:
    *   Configured AI Model Provider API Key and Endpoint (e.g., Google Gemini). **(PARTIAL - Key configured; endpoint implicit in SDK)**
*   **REQ-MVP-ADM-002:** Configuration MUST be manageable through standard .NET mechanisms (e.g., `appsettings.json`, user secrets, environment variables). **(COMPLETE)**

### 3.3. API Consumption & Validation

*   **REQ-MVP-VAL-001:** The API endpoints MUST be programmatically testable (e.g., via integration tests or a consuming library like `Nucleus.Infrastructure.Adapters.Local`) to validate core functionality, including:
    *   Invoking the `/api/v1/interactions` endpoint to send a user query and receive a response.
    *   Invoking the `/api/v1/interactions` endpoint to initiate processing of an artifact reference and receive an acknowledgement or result.
    *   Invoking placeholder status endpoints (e.g., `/api/status`).
    *   Graceful error handling for failed API calls.

### 3.4. Backend API (`Nucleus.ApiService`)

*   **REQ-MVP-API-001:** The API MUST expose a unified `/api/v1/interactions` endpoint (e.g., `POST /api/v1/interactions`).
    *   Accepts a standard interaction request object (containing user info, session context, query text, list of `ArtifactReference` objects, etc.).
    *   Routes the request to the appropriate handler based on context/payload (e.g., activating a Persona for a query, initiating processing for an artifact reference).
    *   For MVP queries, injects and calls the `HandleInteractionAsync` method of the appropriate registered Persona (initially `BootstrapperPersona`).
    *   Returns the persona's response or an acknowledgement (e.g., for asynchronous processing triggers).
*   **REQ-MVP-API-003:** The API MUST expose a placeholder `/api/status` endpoint (e.g., `GET /api/v1/status`).
    *   Returns basic status information (e.g., API health, loaded personas).
*   **REQ-MVP-API-004:** The API MUST correctly register and inject the `BootstrapperPersona` and other necessary services (Logging, Configuration, `IPersonaKnowledgeRepository`, `IEmbeddingGenerator`, `IArtifactProvider`). **(PARTIAL - Persona, Logging, Config injected. Repository/Embeddings/Provider TBD)**
*   **REQ-MVP-API-005:** The API MUST correctly use connection strings/configurations provided by Aspire/environment for accessing emulated/external services (Cosmos DB, AI Provider). **(PARTIAL - AI Provider config used. Cosmos DB TBD)**
*   **REQ-MVP-API-006:** The API MUST include basic health checks (`/healthz`).

### 3.5. System Behavior (Core Logic & Processing)

*   **REQ-MVP-SYS-001:** The `BootstrapperPersona` MUST implement `HandleInteractionAsync` to: **(COMPLETE)**
    *   Receive the interaction context (including query text) from the API.
    *   Interact with the configured AI Model (via `IGenerativeAI`) to generate a response.
    *   Return the generated response.
*   **REQ-MVP-SYS-002:** (Stretch Goal/Minimal) After handling a query, the system SHOULD:
    *   Generate embeddings for the query and/or response (`IEmbeddingGenerator`).
    *   Store a basic `PersonaKnowledgeEntry` record in the Cosmos DB emulator (`IPersonaKnowledgeRepository`) capturing the interaction.
*   **REQ-MVP-SYS-003:** The system MUST implement basic `IPersonaKnowledgeRepository` using the Cosmos DB .NET SDK against the emulator.
*   **REQ-MVP-SYS-004:** The system MUST implement a basic `IEmbeddingGenerator` using the configured AI provider's SDK.
*   **REQ-MVP-SYS-005:** Error handling MUST be implemented in the API and Persona logic to catch common failures (e.g., AI API errors, database connection issues) and return appropriate error responses through the API to the calling client.