---
title: Architecture - Database (Azure Cosmos DB)
description: Details the Azure Cosmos DB structure for storing ArtifactMetadata and PersonaKnowledgeEntry records (using JsonElement for analysis data), managed exclusively via the API service.
version: 2.6
date: 2024-03-09
---

# Nucleus: Database Architecture (Azure Cosmos DB)

This document details the architecture of the backend database used by Nucleus, utilizing Azure Cosmos DB for NoSQL, as introduced in the [System Architecture Overview](./00_ARCHITECTURE_OVERVIEW.md). Cosmos DB serves as the central persistence layer for **all** Nucleus-managed metadata, including both the primary **`ArtifactMetadata`** records describing source artifacts (see [Storage Architecture](./03_ARCHITECTURE_STORAGE.md)) and the **`PersonaKnowledgeEntry`** records containing persona-specific analysis (see [Persona Architecture](./02_ARCHITECTURE_PERSONAS.md)). **Crucially, all database operations are managed and mediated exclusively by the `Nucleus.Services.Api` layer.**

## 1. Core Principle: Centralized Metadata in Cosmos DB, Managed via API

Cosmos DB's role is to provide a highly performant, scalable store for all structured metadata Nucleus generates and manages. Direct access to the database is restricted to the `Nucleus.Services.Api`. Client Adapters and Persona logic interact with this data *indirectly* through API calls and service interfaces provided by the API layer.

*   **`ArtifactMetadata` Store:** Holds the central, factual records *about* each source artifact encountered (defined in [Storage Architecture](./03_ARCHITECTURE_STORAGE.md)). Accessed via `IArtifactMetadataRepository` injected within the API service.
*   **`PersonaKnowledgeEntry` Stores:** Holds the *interpretations* and analyses of artifacts generated by specific [Personas](./02_ARCHITECTURE_PERSONAS.md). Accessed via `IPersonaKnowledgeRepository` injected within the API service.
    *   **Key Change:** Instead of using a generic type parameter (`TAnalysisData`) requiring compile-time C# types for analysis results, `PersonaKnowledgeEntry` now uses `System.Text.Json.JsonElement?` for its `AnalysisData` property. This allows for flexible, arbitrary JSON structures defined entirely within the Persona's configuration, enabling users to create custom Personas and outputs without needing to write or compile new C# code. The structure of the JSON stored in `AnalysisData` is dictated by the specific `IAgenticStrategyHandler` implementation associated with the `StrategyId` stored in the entry.

This approach keeps all queryable metadata within a single, manageable database system, while the actual artifact content remains in the user's source system (accessed ephemerally via [Adapters/IArtifactProvider](./05_ARCHITECTURE_CLIENTS.md) as directed by the API service).

## 2. Database Structure

The Cosmos DB database contains multiple containers:

*   **`ArtifactMetadataContainer` (Recommended Name):**
    *   **Purpose:** Stores all `ArtifactMetadata` documents.
    *   **Partition Key:** Likely `tenantId` (for multi-tenant/self-hosted) or potentially `userId` if strictly single-user focus, or even a synthetic key depending on query patterns across users/tenants.
*   **`{PersonaId}KnowledgeContainer` (One per Persona):**
    *   **Naming Convention:** e.g., `EduFlow_v1KnowledgeContainer`, `BusinessAssistant_v1KnowledgeContainer`.
    *   **Purpose:** Each container holds all `PersonaKnowledgeEntry` documents generated by that specific persona.
    *   **Partition Key:** Typically `userId` (for Cloud-Hosted, user-scoped queries) or `tenantId` (for Self-Hosted, tenant-scoped queries).

## 3. `ArtifactMetadataContainer` Schema

Each document stored within the `ArtifactMetadataContainer` follows the [`ArtifactMetadata`](../../../Nucleus.Abstractions/Models/ArtifactMetadata.cs) record definition.

*   **Key Fields:** `id` (Cosmos Document ID), `sourceIdentifier` (logical key), `sourceUri`, `sourceSystemType`, `displayName`, timestamps, authorship, relationships, processing status (`overallProcessingState`, `personaProcessingStatus`), etc.

## 4. `{PersonaId}KnowledgeContainer` Schema

Each document stored within a persona-specific container follows the [`PersonaKnowledgeEntry`](../../../Nucleus.Abstractions/Models/PersonaKnowledgeEntry.cs) structure, representing that persona's interpretation of a source artifact.

*   **Document Example (`EduFlow_v1KnowledgeContainer` storing `PersonaKnowledgeEntry`):
    ```json
    {
        "id": "unique-pke-guid", // Cosmos DB Document ID for this PersonaKnowledgeEntry
        "userId": "user-guid-or-identifier",     // Partition Key (Cloud-Hosted)
        // "tenantId": "tenant-guid-or-identifier", // Partition Key Alt (Self-Hosted)
        "sourceIdentifier": "spo://...Q1_Report.docx?ver=1", // Links to the ArtifactMetadata document (matches its sourceIdentifier)
        "sourceSegmentIdentifier": null, // Optional: Identifier for a sub-part of the source artifact
        "personaName": "EduFlow_v1", // Explicitly states the generating persona
        "relevantTextSnippetOrSummary": "EduFlow decided this text was most relevant: Learner shows understanding of algebraic equations...", // Persona-extracted/generated text snippet or summary, max length enforced!
        "snippetEmbedding": [0.12, -0.05, ...], // Vector embedding of relevantTextSnippetOrSummary
        "analysis": { // Persona-specific structured analysis object (represented as JsonElement in C#)
            // The structure here is DEFINED BY THE PERSONA CONFIGURATION and corresponding handler.
            // Example structure for an EduFlow persona's analysis:
            "analysisTimestamp": "2025-04-08T03:00:00Z",
            "modelVersion": "gemini-1.5-pro-latest",
            "summary": "A concise summary generated by the EduFlow persona.",
            "keyConcepts": ["Concept A", "Concept B"],
            "difficultyRating": "Intermediate",
            "suggestedFollowUpQuestions": [
                "What is the relationship between Concept A and B?",
                "How does this apply in scenario X?"
            ]
            // Other personas might have completely different structures here.
        },
        "timestampCreated": "2025-04-08T03:05:00Z", // When this PKE was created
        "timestampLastUpdated": "2025-04-08T03:05:00Z", // When this PKE was last updated
        "_ts": 1678722600 // Cosmos DB Timestamp
    }
    ```

### 4.1 C# Model: `PersonaKnowledgeEntry`

```csharp
// Located in: ../../../Nucleus.Abstractions/Models/PersonaKnowledgeEntry.cs
using System;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// Represents a single piece of knowledge extracted or generated by a Persona/Strategy combination,
/// linked to a specific source artifact or segment. This captures what a persona knows about that source/segment.
/// The AnalysisData property uses System.Text.Json.JsonElement to allow flexible, configuration-driven schemas.
/// </summary>
// Removed: <typeparam name="TAnalysisData">The CLR type of the persona-specific analysis payload.</typeparam>
public record PersonaKnowledgeEntry
{
    /// <summary> Gets the unique identifier for this knowledge entry. (Primary Key for Cosmos DB). </summary>
    [JsonPropertyName("id")]
    public required string Id { get; init; }

    /// <summary> Gets the identifier for the tenant associated with this entry. Used as Partition Key in multi-tenant scenarios. </summary>
    public required string TenantId { get; init; }

    /// <summary> Gets the identifier for the user associated with this entry. Used as Partition Key in single-user or user-centric scenarios. </summary>
    public required string UserId { get; init; }

    /// <summary> Gets the unique identifier of the source ArtifactMetadata this knowledge pertains to. </summary>
    public required string ArtifactId { get; init; }

    /// <summary> Gets the identifier of the specific Interaction that led to the creation of this knowledge entry. </summary>
    public required string InteractionId { get; init; }

    /// <summary> Gets the identifier of the Persona that generated this knowledge entry. </summary>
    public required string PersonaId { get; init; }

    /// <summary> Gets the identifier of the specific Strategy/Handler within the Persona that generated this knowledge. </summary>
    public required string StrategyId { get; init; }

    /// <summary> Gets the timestamp when this knowledge entry was created or last significantly updated. </summary>
    public DateTimeOffset Timestamp { get; init; } = DateTimeOffset.UtcNow;

    /// <summary>
    /// Gets the actual analysis data produced by the persona's strategy.
    /// Stored as JsonElement to allow arbitrary structures defined by persona configurations,
    /// rather than requiring specific C# types.
    /// The consuming handler is responsible for understanding and deserializing this element if needed.
    /// Null if no specific analysis data was produced.
    /// </summary>
    public JsonElement? AnalysisData { get; init; }

    // --- Optional Fields (Depending on Persona/Strategy Capabilities) ---

    /// <summary> Gets the confidence level expressed by the persona regarding this analysis. </summary>
    public ConfidenceLevel Confidence { get; init; } = ConfidenceLevel.Unknown;

    /// <summary> Gets a relevant text snippet or a summary from the source artifact related to this knowledge entry. </summary>
    public string? RelevantTextSnippetOrSummary { get; init; }

    /// <summary> Gets the vector embedding of the RelevantTextSnippetOrSummary, if generated and vector search is enabled. </summary>
    public float[]? SnippetEmbedding { get; init; }

    // --- Timestamps --- 
    // Redundant with 'Timestamp' currently, potentially useful for fine-grained tracking later.
    // public DateTimeOffset TimestampCreated { get; init; } = DateTimeOffset.UtcNow;
    // public DateTimeOffset TimestampLastUpdated { get; init; } = DateTimeOffset.UtcNow;

    // Cosmos DB specific timestamp (_ts) is handled automatically.

}

## 5. Integration with Other Architectures

### 5.1 Processing (`01_ARCHITECTURE_PROCESSING.md`)
*   The **`Nucleus.Services.Api` orchestrates** the processing pipeline based on incoming API requests (e.g., `POST /api/v1/interactions`).
*   Within the API service's processing logic (e.g., in `OrchestrationService`), the **`IArtifactMetadataRepository`** implementation (injected via DI) is used to create/update `ArtifactMetadata` in `ArtifactMetadataContainer`.
*   The API service invokes Persona logic (e.g., `IPersona.AnalyzeContentAsync`). Persona logic operates *within the context of the API service*. Content is provided to personas by the API service (potentially fetched ephemerally using `IArtifactProvider` based on `ArtifactReference`s from the request).
*   Personas return `PersonaKnowledgeEntry` data *to the API service's orchestrator*.
*   The API service's orchestrator uses the **`IPersonaKnowledgeRepository`** implementation (injected via DI) to store `PersonaKnowledgeEntry` in the appropriate `{PersonaId}KnowledgeContainer`.
*   The API service updates the `personaProcessingStatus` dictionary within the relevant `ArtifactMetadata` document in Cosmos DB (again, via the injected `IArtifactMetadataRepository`).

### 5.2 Personas (`02_ARCHITECTURE_PERSONAS.md`)

*   **Analysis:** Persona logic (implementing `IPersona`) is executed *by* the `Nucleus.Services.Api` layer. It receives context (including ephemerally fetched content streams, if needed) from the API service, performs analysis, and returns structured results (like the `analysis` object and `relevantTextSnippetOrSummary`) **back to the API service orchestrator**.
*   **Retrieval for Querying/Reporting (RAG):**
    *   When handling a query API request, the API service invokes the relevant Persona logic (via `PersonaRuntime`).
    *   The Persona logic (specifically, an `IAgenticStrategyHandler`) requests knowledge via the API service's injected `IPersonaKnowledgeRepository`.
    *   The repository implementation (within the API service) queries the appropriate `{PersonaId}KnowledgeContainer` in Cosmos DB (performing vector searches, filtering, etc.).
    *   The repository returns the results **to the Persona logic (still running within the API service context)**.
    *   If the Persona logic determines more context is needed (e.g., fresh content from the source), it **signals this requirement back to the API service orchestrator**. The orchestrator then uses the `sourceIdentifier` (from the PKE) and `ArtifactMetadata` to resolve the correct `ArtifactReference` and instructs the appropriate `IArtifactProvider` implementation to **ephemerally fetch the content**. This fetched content is then passed back to the Persona logic.
    *   The Persona uses the retrieved knowledge and any additionally fetched ephemeral content to generate the final response, which is returned through the API service.

### 5.3 Storage (`03_ARCHITECTURE_STORAGE.md`)
*   The [Storage Architecture](./03_ARCHITECTURE_STORAGE.md) document (`03_ARCHITECTURE_STORAGE.md`) primarily defines the **logical structure of the `ArtifactMetadata` object**, which is persisted within the `ArtifactMetadataContainer` in Cosmos DB.
*   It clarifies that artifact *content* resides externally in user source systems, accessed via [Adapters](./05_ARCHITECTURE_CLIENTS.md).

## 6. Scalability and Performance

*   **Partitioning:** Proper partition key selection (`userId`, `tenantId`, or other) is crucial for distributing load and enabling efficient queries within both `ArtifactMetadataContainer` and `{PersonaId}KnowledgeContainer`s. The choice impacts cost and scalability and is influenced by the [Deployment Model](./07_ARCHITECTURE_DEPLOYMENT.md) (e.g., cloud-hosted multi-tenant vs. self-hosted single-tenant) and [Security](./06_ARCHITECTURE_SECURITY.md) requirements.
*   **Vector Search:** Integrated Vector Database capabilities in Cosmos DB enable efficient similarity searches within each persona's container.
*   **Indexing:** Appropriate indexing policies (beyond vector indexes) are needed for efficient metadata filtering (see [Security considerations](./06_ARCHITECTURE_SECURITY.md) regarding what gets indexed).
*   **Throughput:** RU/s need to be provisioned appropriately for the database or individual containers based on expected load (see [Deployment Architecture](./07_ARCHITECTURE_DEPLOYMENT.md) for cost implications).

## 7. Next Steps

1.  **Implement Repository Layer:** Develop concrete implementations (likely within `Nucleus.Infrastructure.Persistence`) for the defined [`IArtifactMetadataRepository`](../../../Nucleus.Abstractions/Repositories/IArtifactMetadataRepository.cs) and [`IPersonaKnowledgeRepository`](../../../Nucleus.Abstractions/Repositories/IPersonaKnowledgeRepository.cs) interfaces using the Cosmos DB .NET SDK. Ensure dynamic container handling for PKEs. *(CosmosDbPersonaKnowledgeRepository updated for JsonElement)*
2.  **Define Partition Key Strategy:** Finalize the partition key choices for both container types based on [deployment models](./07_ARCHITECTURE_DEPLOYMENT.md) and query patterns.
3.  **Provision Cosmos DB:** Set up the Cosmos DB account, database, and define container creation/configuration strategy (part of [Deployment](./07_ARCHITECTURE_DEPLOYMENT.md)).
4.  **Integrate with Processing Pipeline:** Update the [pipeline](./01_ARCHITECTURE_PROCESSING.md) (orchestrated by the API service) to implement the flow described in Section 5.1, utilizing the repository implementations. Ensure handlers correctly interpret the `JsonElement` analysis data based on `StrategyId`.

---

_This architecture document specifies the Cosmos DB structure, clarifying its role as the central store for both factual `ArtifactMetadata` and interpretive `PersonaKnowledgeEntry` data, linking them via the `sourceIdentifier`._