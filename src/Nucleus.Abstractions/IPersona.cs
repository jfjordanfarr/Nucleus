using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration; 
using Nucleus.Abstractions.Models; 

namespace Nucleus.Abstractions;

/// <summary>
/// Represents metadata associated with a source artifact.
/// Placeholder - Properties to be defined based on storage/retrieval needs.
/// Reference: Docs/Architecture/03_ARCHITECTURE_STORAGE.md
/// Reference: Docs/Architecture/04_ARCHITECTURE_DATABASE.md
/// </summary>

/// <summary>
/// Represents the input for persona analysis, containing the standardized content.
/// Reference: Docs/Architecture/02_ARCHITECTURE_PERSONAS.md
/// </summary>
/// <param name="SourceIdentifier">The unique identifier of the original source artifact.</param>
/// <param name="StandardizedContent">The content extracted and standardized (e.g., into Markdown).</param>
/// <param name="Metadata">Metadata about the source artifact.</param>
/// <param name="AdditionalContext">Optional additional context for the persona.</param>
public record ContentItem(string SourceIdentifier, string StandardizedContent, ArtifactMetadata Metadata, Dictionary<string, object>? AdditionalContext = null);

/// <summary>
/// Represents the result of a persona's analysis on a ContentItem.
/// Reference: Docs/Architecture/02_ARCHITECTURE_PERSONAS.md
/// </summary>
/// <typeparam name="TAnalysisData">The type of the structured analysis data produced by the persona.</typeparam>
/// <param name="StructuredAnalysis">The structured data extracted or generated by the persona.</param>
/// <param name="RelevantTextSnippetOrSummary">A key text snippet or summary identified during analysis.</param>
public record PersonaAnalysisResult<TAnalysisData>(TAnalysisData StructuredAnalysis, string RelevantTextSnippetOrSummary) where TAnalysisData : class;

/// <summary>
/// Represents a query from a user directed towards a persona.
/// Reference: Docs/Architecture/02_ARCHITECTURE_PERSONAS.md
/// </summary>
/// <param name="QueryText">The text of the user's query.</param>
/// <param name="UserId">Identifier for the user making the query.</param>
/// <param name="Context">Additional context relevant to the query (e.g., session ID, previous messages).</param>
public record UserQuery(string QueryText, string UserId, Dictionary<string, object> Context);

/// <summary>
/// Represents the result of a persona processing a user query.
/// </summary>
/// <param name="ResponseText">The textual response generated by the persona.</param>
/// <param name="SourceReferences">A list of source identifiers (e.g., document IDs, URLs) referenced in the response.</param>
/// <param name="GeneratedArtifactReference">Optional reference to an artifact generated by the persona during query processing.</param>
public record PersonaQueryResult(string ResponseText, List<string> SourceReferences, ArtifactReference? GeneratedArtifactReference = null);

/// <summary>
/// Base interface representing a distinct AI persona within Nucleus.
/// Defines common properties like ID, name, and description.
/// </summary>
/// <remarks>
/// See: Docs/Architecture/02_ARCHITECTURE_PERSONAS.md
/// </remarks>
/// <seealso cref="../../../../Docs/Architecture/01_ARCHITECTURE_PROCESSING.md"/>
/// <seealso cref="../../../../Docs/Architecture/02_ARCHITECTURE_PERSONAS.md"/>
public interface IPersona
{
    /// <summary>
    /// Gets the unique identifier for the persona (e.g., "edu-flow-analyzer").
    /// </summary>
    string PersonaId { get; }

    /// <summary>
    /// Gets the user-friendly display name for the persona (e.g., "EduFlow Learning Analyzer").
    /// </summary>
    string DisplayName { get; }

    /// <summary>
    /// Gets a description of the persona's purpose and capabilities.
    /// </summary>
    string Description { get; }
}

/// <summary>
/// Represents a persona within the Nucleus system, capable of specialized analysis,
/// knowledge retrieval, and interaction based on its defined role and configuration.
/// This interface is central to the pluggable intelligence model of Nucleus.
/// 
/// Personas are expected to interact with underlying AI models (like Gemini) and potentially
/// specialized knowledge repositories (like vector databases) to fulfill their tasks.
/// </summary>
/// <typeparam name="TAnalysisData">The type of structured data this persona generates.</typeparam>
/// <seealso cref="ContentItem"/>
/// <seealso cref="PersonaAnalysisResult{TAnalysisData}"/>
/// <seealso cref="UserQuery"/>
/// <seealso cref="PersonaQueryResult"/>
/// <seealso cref="../../../../Docs/Architecture/01_ARCHITECTURE_PROCESSING.md"/>
/// <seealso cref="../../../../Docs/Architecture/02_ARCHITECTURE_PERSONAS.md"/>
public interface IPersona<TAnalysisData> : IPersona where TAnalysisData : class
{
    /// <summary>
    /// Performs persona-specific analysis on the standardized content (e.g., Markdown)
    /// provided by the upstream processing pipeline, identifying relevant sections
    /// and producing structured analysis results.
    /// </summary>
    /// <param name="content">The content item to analyze.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>The structured analysis result.</returns>
    Task<PersonaAnalysisResult<TAnalysisData>> AnalyzeContentAsync(ContentItem content, CancellationToken cancellationToken = default);

    /// <summary>
    /// Analyzes ephemeral content (e.g., raw text from ingestion) before full processing or persistence.
    /// This is often used for temporary caching or initial context setup for subsequent queries.
    /// See: [Architecture: AI Integration - Caching](~/../../Docs/Architecture/08_ARCHITECTURE_AI_INTEGRATION.md#2-caching-bootstrapperpersonaanalyzeephemeralcontentasync)
    /// </summary>
    /// <param name="ephemeralContent">The raw or semi-processed content string.</param>
    /// <param name="sourceIdentifier">An identifier for the source of the content (e.g., file path, URL).</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    /// <seealso cref="Nucleus.Personas.Core.BootstrapperPersona.AnalyzeEphemeralContentAsync"/>
    Task AnalyzeEphemeralContentAsync(string ephemeralContent, string sourceIdentifier, CancellationToken cancellationToken = default);

    /// <summary>
    /// Handles a user query directed at this persona, optionally using provided ephemeral context,
    /// leveraging retrieval and AI generation to provide a contextual answer.
    /// See: [Architecture: AI Integration - Chat Interaction](~/../../Docs/Architecture/08_ARCHITECTURE_AI_INTEGRATION.md#3-chat-interaction)
    /// See: [Architecture: AI Integration - Context Usage](~/../../Docs/Architecture/08_ARCHITECTURE_AI_INTEGRATION.md#3-contextual-query-post-apiquery)
    /// </summary>
    /// <param name="query">The user's query details.</param>
    /// <param name="extractedContents">Optional collection of extracted content results.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>The result of the query, including the response text and any source references.</returns>
    /// <seealso cref="UserQuery"/>
    /// <seealso cref="PersonaQueryResult"/>
    Task<PersonaQueryResult> HandleQueryAsync(UserQuery query, IReadOnlyList<ArtifactContent> extractedContents, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// (Optional) Allows the persona to load specific configuration during application startup.
    /// </summary>
    /// <param name="configurationSection">The configuration section relevant to this persona.</param>
    /// <returns>A task representing the asynchronous configuration operation.</returns>
    Task ConfigureAsync(IConfigurationSection configurationSection);
}
