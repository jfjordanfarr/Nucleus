using System;
using System.IO;
using System.Reflection; // Added for Assembly
using System.Text;
using System.Text.Json; // For potential JSON escaping if needed later
using System.Text.Encodings.Web; // For JavaScript escaping
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net; // Added for WebUtility

namespace Nucleus.Domain.Processing.Services;

/// <summary>
/// Nucleus Dataviz HTML Artifact Builder
///
/// - See architecture: ../Docs/Architecture/Processing/ARCHITECTURE_PROCESSING_DATAVIZ.md
/// - Related: dataviz_script.js, dataviz_plotly_script.py
/// - Working example: ../Docs/Architecture/Processing/Dataviz/EXAMPLE_OUTPUT_nucleus_dataviz_20250416145545.html
/// </summary>
/// <summary>
/// Service responsible for building the self-contained HTML for Pyodide-based data visualizations.
/// Reads template files and injects Persona-provided Python code and JSON data.
/// </summary>
/// <seealso cref="../../Docs/Architecture/Processing/ARCHITECTURE_PROCESSING_DATAVIZ.md"/>
/// <seealso cref="../../Docs/Architecture/Processing/Dataviz/ARCHITECTURE_DATAVIZ_TEMPLATE.md"/>
public class DatavizHtmlBuilder
{
    private readonly ILogger<DatavizHtmlBuilder> _logger;
    private readonly string _basePath; // Field to store calculated base path

    // Properties to get full paths dynamically
    private string HtmlTemplatePath => Path.Combine(_basePath, "dataviz_template.html");
    private string CssPath => Path.Combine(_basePath, "dataviz_styles.css");
    private string MainScriptPath => Path.Combine(_basePath, "dataviz_script.js");
    private string WorkerScriptPath => Path.Combine(_basePath, "dataviz_worker.js");

    public DatavizHtmlBuilder(ILogger<DatavizHtmlBuilder> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));

        // Calculate base path relative to the executing assembly of this class
        var assemblyLocation = Path.GetDirectoryName(typeof(DatavizHtmlBuilder).Assembly.Location);
        if (string.IsNullOrEmpty(assemblyLocation))
        {
            _logger.LogError("Could not determine assembly location for DatavizHtmlBuilder resources.");
            throw new InvalidOperationException("Could not determine assembly location for DatavizHtmlBuilder resources.");
        }
        _basePath = Path.Combine(assemblyLocation, "Resources", "Dataviz");
        _logger.LogInformation("Dataviz resource base path resolved to: {BasePath}", _basePath);

        // Optional: Check if the directory exists early
        if (!Directory.Exists(_basePath))
        {
             _logger.LogWarning("Dataviz resource directory does not exist at the expected path: {BasePath}. Build might have failed to copy resources.", _basePath);
             // Depending on strictness, could throw here.
        }
    }

    /// <summary>
    /// Assembles a self-contained HTML data visualization artifact using a provided Python snippet and JSON data.
    /// </summary>
    /// <param name="personaPythonScript">The specific, ready-to-execute Python code snippet provided by the Persona (or generated by a VisualizationService).</param>
    /// <param name="jsonData">The JSON data string required by the Python script.</param>
    /// <returns>A string containing the complete HTML artifact, or null if an error occurred.</returns>
    /// <seealso cref="../../Docs/Architecture/Processing/ARCHITECTURE_PROCESSING_DATAVIZ.md"/>
    /// <seealso cref="../../Docs/Architecture/Processing/Dataviz/ARCHITECTURE_DATAVIZ_TEMPLATE.md"/>
    public async Task<string?> BuildVisualizationHtmlAsync(string personaPythonScript, string jsonData)
    {
        _logger.LogInformation("Attempting to build Dataviz HTML artifact.");
        try
        {
            // 1. Read all template files asynchronously (using the properties)
            var htmlTemplateTask = File.ReadAllTextAsync(HtmlTemplatePath);
            var cssContentTask = File.ReadAllTextAsync(CssPath);
            var mainScriptContentTask = File.ReadAllTextAsync(MainScriptPath);
            var workerScriptContentTask = File.ReadAllTextAsync(WorkerScriptPath);

            // Wait for essential files
            await Task.WhenAll(htmlTemplateTask, cssContentTask, mainScriptContentTask, workerScriptContentTask);

            var htmlTemplate = await htmlTemplateTask;
            var cssContent = await cssContentTask;
            var mainScriptContent = await mainScriptContentTask;
            var workerScriptContent = await workerScriptContentTask;

            // Ensure JSON is not null or empty; default if necessary
            if (string.IsNullOrWhiteSpace(jsonData))
            {
                _logger.LogWarning("Input JSON data is null or empty. Defaulting to empty object {{}}.");
                jsonData = "{}"; // Default to empty object if empty/null
            }

            // Ensure Python script is not null or empty; provide placeholder if needed
            if (string.IsNullOrWhiteSpace(personaPythonScript))
            {
                _logger.LogWarning("Input Python script is null or empty. Using placeholder comment.");
                personaPythonScript = "# No Python script provided";
            }

            _logger.LogDebug("Preparing final HTML artifact.");

            // 2. Safely encode JSON data for JavaScript injection
            //    ASSUMPTION: dataviz_script.js contains the placeholder '{{SAFE_JSON_DATA_PLACEHOLDER}}'
            //    Make sure the placeholder in the JS file includes the surrounding quotes if they exist there.
            var safeJsonDataForJs = JavaScriptEncoder.Default.Encode(jsonData);
            // Ensure the encoded string is treated as a JS object literal, not just a string
            // We expect jsonData to be a JSON string representing an object like {'x_col': [], 'y_col': []}
            // JavaScriptEncoder encodes quotes, so the output is like "{\"x_col\":[1,2],\"y_col\":[3,4]}"
            // We need to parse this string in JS, so the placeholder replacement becomes `JSON.parse("{{ENCODED_JSON_STRING}}")`
            string placeholderToFind = "'{{SAFE_JSON_DATA_PLACEHOLDER}}'";
            string replacementValue = $"JSON.parse('{safeJsonDataForJs}')";
            _logger.LogDebug("Attempting to replace JSON placeholder '{Placeholder}'", placeholderToFind);
            _logger.LogTrace("Replacement value (first 50 chars): {Value}...", replacementValue.Length > 50 ? replacementValue.Substring(0, 50) : replacementValue);
            string originalContentSnippet = mainScriptContent.Length > 100 ? mainScriptContent.Substring(0, 100) : mainScriptContent;
            _logger.LogTrace("Main script content BEFORE replacement (first 100 chars):\n{Content}", originalContentSnippet);

            string modifiedScriptContent = mainScriptContent.Replace(placeholderToFind, replacementValue);

            if (modifiedScriptContent == mainScriptContent)
            {
                _logger.LogWarning("JSON placeholder '{Placeholder}' was NOT found or replaced in main script content!", placeholderToFind);
            }
            else
            {
                _logger.LogDebug("JSON placeholder '{Placeholder}' replaced successfully.", placeholderToFind);
                string modifiedContentSnippet = modifiedScriptContent.Length > 100 ? modifiedScriptContent.Substring(0, 100) : modifiedScriptContent;
                _logger.LogTrace("Main script content AFTER replacement (first 100 chars):\n{Content}", modifiedContentSnippet);
            }
            mainScriptContent = modifiedScriptContent; // Use the modified script

            // 3. Encode content for safe HTML display (e.g., in modals)
            //    Encode the provided Python snippet and JSON data for display purposes.
            var encodedPythonSnippetForHtml = WebUtility.HtmlEncode(personaPythonScript);
            var encodedJsonDataForHtml = WebUtility.HtmlEncode(jsonData); // For display, not execution
            var encodedWorkerScriptForHtml = WebUtility.HtmlEncode(workerScriptContent);

            // --- HTML Artifact Generation ---
            // See ARCHITECTURE_PROCESSING_DATAVIZ.md, section "HTML Export & Robustness" for rationale on robust encoding and embedding.
            // This logic injects CSS, Python, and Plotly JSON into the HTML template, using server-side encoding for safety.
            // For details and lessons learned, see working example above.
            var finalHtmlBuilder = new StringBuilder(htmlTemplate);
            // Inject CSS
            finalHtmlBuilder.Replace("<!-- {{STYLES_PLACEHOLDER}} -->", $"<style>\n{cssContent}\n</style>");
            // Inject the main script *after* JSON data has been embedded into it
            finalHtmlBuilder.Replace("{{MAIN_SCRIPT}}", mainScriptContent);
            // Inject the provided Python snippet (HTML encoded) for display in modals/etc.
            finalHtmlBuilder.Replace("{{PYTHON_SCRIPT}}", encodedPythonSnippetForHtml);
            // Inject the worker script content (HTML encoded) for display in modals/etc.
            finalHtmlBuilder.Replace("{{WORKER_SCRIPT}}", encodedWorkerScriptForHtml);
            // Inject the raw JSON data (HTML encoded) for display in modals/etc.
            finalHtmlBuilder.Replace("{{JSON_DATA}}", encodedJsonDataForHtml);

            var finalHtml = finalHtmlBuilder.ToString();

            _logger.LogInformation("Successfully built Dataviz HTML artifact.");
            return finalHtml;
        }
        catch (FileNotFoundException fnfEx)
        {
            _logger.LogError(fnfEx, "Dataviz template file not found: {FilePath}. Base directory: {BaseDir}", fnfEx.FileName, AppContext.BaseDirectory);
            return null;
        }
        catch (IOException ioEx)
        {
            _logger.LogError(ioEx, "Error reading dataviz template file.");
            return null;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred while building the dataviz HTML.");
            return null;
        }
    }
}
