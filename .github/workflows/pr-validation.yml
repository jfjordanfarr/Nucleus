name: PR & Develop Branch Validation

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE_PATH: ./Nucleus.sln
  TEST_RESULTS_PATH: ${{ github.workspace }}/TestResults

jobs:
  build_lint_unit_test:
    name: Build, Lint & Unit Test
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ job.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build Solution
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Create Test Results Directory # New step
        run: mkdir -p ${{ env.TEST_RESULTS_PATH }}

      - name: Run Unit Tests
        run: >
          dotnet test ${{ env.SOLUTION_FILE_PATH }} 
          --configuration Release 
          --no-build 
          --filter "Category!=Integration"
          --logger "trx;LogFileName=unit_test_results.trx"
          --results-directory ${{ env.TEST_RESULTS_PATH }} # Add results-directory for consistency
          --diag "${{ env.TEST_RESULTS_PATH }}/unit_test_diag.log"
      
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: "**/unit_test_results.trx"

  integration_test:
    name: Integration Tests (.NET Aspire)
    runs-on: ubuntu-latest
    needs: build_lint_unit_test
    if: >
      needs.build_lint_unit_test.outputs.build_status == 'success' &&
      (
        github.event_name == 'pull_request' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/develop' &&
         !contains(github.event.head_commit.message, '[skip integration tests]') &&
         !contains(github.event.head_commit.message, '[skip ci]')
        )
      )
    env:
      INTEGRATION_TESTS_ENABLED: "false" # This is the key variable read by NucleusConstants
      NUCLEUS_TEST_LOGGING_FORMAT_SIMPLE: "true"
      # GOOGLE_AI_API_KEY_FOR_TESTS: ${{ secrets.GOOGLE_AI_API_KEY_FOR_TESTS }}
      # TEST_RESULTS_PATH is inherited from the top-level env block
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Run Integration Tests
        if: steps.filter.outputs.integration == 'true' && env.INTEGRATION_TESTS_ENABLED == 'true'
        env:
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY_FOR_TESTS }}
        run: >
          dotnet test ./tests/Integration/Nucleus.Services.Api.IntegrationTests/Nucleus.Services.Api.IntegrationTests.csproj
          --filter "Category=Integration"
          --logger "trx;LogFileName=integration_test_results.trx"
          --results-directory ${{ env.TEST_RESULTS_PATH }}
          --diag "${{ env.TEST_RESULTS_PATH }}/integration_test_diag.log"
      
      - name: Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: "**/integration_test_results.trx"

  nuget_vulnerability_scan:
    name: NuGet Package Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build_lint_unit_test
    if: needs.build_lint_unit_test.outputs.build_status == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore solution to ensure all packages are available
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}
      - name: Check for vulnerable NuGet packages
        run: dotnet list ${{ env.SOLUTION_FILE_PATH }} package --vulnerable --include-transitive --verbosity normal
