name: Nucleus Release CI/CD

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v1.2.3-beta1

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE_PATH: ./Nucleus.sln
  API_PROJECT_PATH: src/Nucleus.Services/Api/Nucleus.Services.Api.csproj
  DOCKERFILE_PATH: src/Nucleus.Services/Api/Dockerfile
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/nucleus-api # Simplified

jobs:
  build_and_publish_release:
    name: Build, Test, Publish Docker Image & Create GitHub Release
    runs-on: ubuntu-latest
    environment: ci_tests # Added to make secrets available to this job, especially for tests
    permissions:
      contents: write
      packages: write
      # id-token: write # If using OIDC for cloud auth

    steps:
      - name: Checkout code at specific tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for changelog generators that rely on full history

      - name: Setup .NET SDK ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore Dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build Solution (Release Configuration)
        run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-restore

      - name: Run All Tests (Final Sanity Check)
        env:
          INTEGRATION_TESTS_ENABLED: "true"
          NUCLEUS_TEST_LOGGING_FORMAT_SIMPLE: "true"
          # GOOGLE_AI_API_KEY_FOR_TESTS is now available from the 'ci_tests' environment secrets
        run: dotnet test ${{ env.SOLUTION_FILE_PATH }} --configuration Release --no-build --logger "trx;LogFileName=release_test_results.trx"

      - name: Upload Release Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-test-results
          path: "**/release_test_results.trx"

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }} # Use simplified env var
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ !contains(github.ref_name, '-') }} # Add latest if not a pre-release
            # type=sha # Optionally tag with commit SHA

      - name: Build and Push Docker image (Nucleus API)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PUBLISH_CONFIGURATION=Release
            TRIMMED=true
            TRIM_MODE=full
            READY_TO_RUN=true
            # NATIVE_AOT=false # Set to true if/when you use Native AOT
            # RUNTIME_IDENTIFIER=linux-x64 # Or linux-musl-x64 for Alpine

      # Placeholder for Container Vulnerability Scanning (e.g., Trivy)
      # - name: Scan Docker Image with Trivy
      #   uses: aquasecurity/trivy-action@master 
      #   with:
      #     image-ref: 'ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}'
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL,HIGH' 
      # - name: Upload Trivy scan results to GitHub Security tab
      #   if: success() || failure() 
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: 'trivy-results.sarif'

      - name: Create Release Artifacts Directory
        run: mkdir ./release_artifacts

      - name: Copy docker-compose.yml to artifacts
        run: |
          cp ./deploy/docker-compose.yml ./release_artifacts/docker-compose.yml
          echo "Copied docker-compose.yml (Note: Image tag is not dynamically updated in this script)"

      - name: Copy README.md to artifacts
        run: cp ./README.md ./release_artifacts/README.md

      - name: Zip Release Artifacts
        run: |
          cd ./release_artifacts
          zip -r ../nucleus-release-assets.zip .
          cd ..
          echo "Zipped release artifacts"
        
      - name: Generate Release Notes (Placeholder)
        id: generate_notes
        run: |
          echo "## Release Notes for ${{ github.ref_name }}" > ./release_artifacts/release_notes.md
          echo "" >> ./release_artifacts/release_notes.md
          echo "For detailed changes, please see the commit history or a dedicated CHANGELOG.md (not auto-generated by this workflow)." >> ./release_artifacts/release_notes.md
          echo "Docker Image: ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> ./release_artifacts/release_notes.md
          echo "Generated placeholder release notes"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Nucleus ${{ github.ref_name }}
          body_path: ./release_artifacts/release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') || contains(github.ref_name, '-rc') }}

      - name: Upload Release Asset (Zip Package)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./nucleus-release-assets.zip
          asset_name: nucleus-${{ github.ref_name }}-assets.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (docker-compose.yml)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_artifacts/docker-compose.yml
          asset_name: docker-compose.yml
          asset_content_type: application/x-yaml
