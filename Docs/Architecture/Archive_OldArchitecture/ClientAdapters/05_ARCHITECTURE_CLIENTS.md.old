---
title: "Nucleus: Client & Agent Interaction Architecture (Post-M365 Agent SDK Pivot)"
description: "Outlines the architecture for how users and systems interact with Nucleus, now primarily through Microsoft 365 Persona Agents and backend Model Context Protocol (MCP) Tools."
version: 5.0
date: 2025-05-25
parent: ./00_ARCHITECTURE_OVERVIEW.md
see_also:
  - title: "Local Adapter Architecture (Re-evaluated Role)"
    link: "./ClientAdapters/ARCHITECTURE_ADAPTERS_LOCAL.md" # [TO BE MODIFIED]
  - title: "M365 Agents SDK Overview" # [NEW DOCUMENT NEEDED]
    link: "./Agents/ARCHITECTURE_M365_AGENTS_OVERVIEW.md"
  - title: "MCP Tools Overview" # [NEW DOCUMENT NEEDED]
    link: "./McpTools/ARCHITECTURE_MCP_TOOLS_OVERVIEW.md"
  - title: "Superseded: API Architecture"
    link: "./10_ARCHITECTURE_API.md" # [TO BE ARCHIVED/SUPERSEDED]
---

# Nucleus: Client & Agent Interaction Architecture (Post-M365 Agent SDK Pivot)

This document outlines the architecture for how end-users and other systems interact with the Nucleus platform. **This has been significantly revised following Project Nucleus's strategic pivot to the Microsoft 365 Agents SDK and the Model Context Protocol (MCP).**

The primary interaction model is now centered around **Nucleus M365 Persona Agents** (built with the M365 Agents SDK) which handle communication on various platforms (e.g., Microsoft Teams, M365 Copilot). These agents, in turn, act as MCP Clients to consume backend Nucleus capabilities exposed as **MCP Tool/Server applications**. The previous model of custom-built client adapters directly calling a monolithic `Nucleus.Services.Api` is **deprecated**.

## 1. Core Principles (Revised for M365 Agents & MCP)

*   **M365 Agents as Primary User Interface:** For supported communication platforms (Teams, M365 Copilot, etc.), users interact with Nucleus Personas through dedicated Nucleus M365 Agent applications. These agents leverage the M365 Agents SDK to handle platform-specific communication.
*   **MCP for Backend Capabilities:** Core Nucleus functionalities (data access, file processing, RAG, persona-specific logic beyond basic orchestration) are exposed as backend MCP Tool/Server applications. Nucleus M365 Agents consume these MCP Tools.
*   **Reference-Based Context Remains Key:** When dealing with user files, the M365 Agent will receive file information from the platform SDK. It will then pass appropriate references (e.g., `ArtifactReference` or similar structured data) to backend Nucleus MCP Tools (like a `Nucleus_FileAccess_McpServer`) which are responsible for ephemeral content retrieval using `IArtifactProvider` logic. **Direct file content transfer to the M365 Agent or MCP Tools over the primary interaction path is avoided where reference-based access is more appropriate and secure.**
*   **Clear Feedback via M365 Agents:** Nucleus M365 Persona Agents are responsible for providing clear status updates and results to users on their respective platforms.
*   **Extensibility through MCP:** New backend capabilities can be added as new MCP Tools, discoverable and consumable by M365 Agents. New channel support is primarily dependent on the M365 Agents SDK's capabilities.
*   **Internal Integration & Testing (Role of Local Adapter Re-evaluated):** The `Nucleus.Infrastructure.Adapters.Local` library's role shifts. It may now serve as a direct testing client for backend **Nucleus MCP Tool/Server applications** or for in-process testing of shared Nucleus core logic libraries.

## 2. Primary User Interaction: Nucleus M365 Persona Agents

Users will primarily interact with Nucleus Personas through dedicated **Nucleus M365 Persona Agent applications**.

*   **Technology:** Built using the **Microsoft 365 Agents SDK** (for .NET).
*   **Function:**
    *   Handles all communication with the specific user-facing platform (e.g., Microsoft Teams) using the M365 Agents SDK.
    *   Receives user messages, commands, and file attachment information as `Activity` objects (or equivalent M365 SDK types).
    *   Implements the core logic for the specific Nucleus Persona it embodies (leveraging `IPersonaRuntime` and `PersonaConfiguration`).
    *   Acts as an **MCP Client** to discover and invoke backend **Nucleus MCP Tool/Server applications** to perform tasks like data retrieval, file processing, complex analysis, etc.
    *   Formats responses and sends them back to the user via the M365 Agents SDK.
    *   Manages conversational state using M365 Agents SDK mechanisms (`ITurnState`, `AgentState`, `IStorage`).
    *   For long-running tasks, it enqueues messages (with `ConversationReference`) to Nucleus's backend `IBackgroundTaskQueue` (Azure Service Bus). The background worker then calls MCP Tools and uses the M365 Agent's proactive messaging capabilities to send results.
*   **Deployment:** Each distinct Nucleus M365 Persona Agent is a separate deployable .NET application (e.g., hosted on Azure Container Apps or App Service), registered with Azure Bot Service for channel connectivity and with Microsoft Entra ID for its unique Entra Agent ID.

**Key Architectural Change:** The responsibility of translating platform-specific events and formatting platform-specific responses, previously handled by custom client adapters (like `Nucleus.Adapters.Teams`), is now largely managed by the **Microsoft 365 Agents SDK** within each Nucleus M365 Persona Agent application.

## 3. Backend Interaction: Nucleus MCP Tool/Server Applications

The core, reusable capabilities of Nucleus are exposed as backend **MCP Tool/Server applications**.

*   **Technology:** .NET applications (e.g., ASP.NET Core exposing MCP endpoints via the C# MCP SDK, or Azure Functions).
*   **Function:** Encapsulate specific Nucleus functionalities, for example:
    *   `Nucleus_KnowledgeStore_McpServer`: Handles all interactions with the Cosmos DB (CRUD for `ArtifactMetadata`, `PersonaKnowledgeEntry`, queries).
    *   `Nucleus_FileAccess_McpServer`: Implements `IArtifactProvider` logic to ephemerally fetch file content based on `ArtifactReference` objects.
    *   `Nucleus_RAGPipeline_McpServer`: Implements advanced retrieval logic (4R ranking, hybrid search).
    *   `Nucleus_PersonaBehaviourConfig_McpServer`: Manages dynamic/behavioral parts of `PersonaConfiguration` stored in Cosmos DB.
*   **Interaction:** Nucleus M365 Persona Agents call these MCP Tools using a standardized MCP client. Communication is typically over HTTPS, secured with Microsoft Entra ID (service-to-service authentication where the M365 Agent's Managed Identity/Entra Agent ID acquires a token for the MCP Tool).

## 4. Internal System Interaction & Testing: The Evolving Role of `Nucleus.Infrastructure.Adapters.Local`

The `Nucleus.Infrastructure.Adapters.Local` library ([see `ARCHITECTURE_ADAPTERS_LOCAL.md`](./ClientAdapters/ARCHITECTURE_ADAPTERS_LOCAL.md) **[TO BE MODIFIED]**) was originally designed for in-process interaction with the monolithic `Nucleus.Services.Api`. Its role needs to be re-evaluated:

*   **Potential New Roles:**
    *   **Direct MCP Tool Testing Client:** It could be adapted to act as a direct programmatic client to the various backend **Nucleus MCP Tool/Server applications** for integration testing or internal system workflows that don't require a full M365 Agent frontend.
    *   **In-Process Testing of Core Libraries:** If core Nucleus logic (e.g., `IPersonaRuntime` without the M365 Agent shell, or specific processing algorithms) is packaged into shared libraries, the `LocalAdapter` might provide a test harness for these.
*   **Deprecated Role:** Its use as a client to the old `Nucleus.Services.Api` (which is being decomposed) is deprecated.

**The `LocalAdapter` is NOT a user-facing application.** Its utility will be for backend testing and potentially for headless system-to-system interactions with Nucleus MCP Tools if needed.

## 5. Deprecated: Custom Platform Client Adapters & Old API Interaction

The previous approach (outlined in older versions of this document and in `Architecture/ClientAdapters/*`) involving custom-built platform adapters like `Nucleus.Adapters.Teams`, `Nucleus.Adapters.Discord`, etc., that directly called a central `Nucleus.Services.Api` using `AdapterRequest` / `AdapterResponse` DTOs is now **deprecated and superseded** by the **Nucleus M365 Persona Agent** model.

*   **Files/Projects to be Archived/Refactored:**
    *   `src/Nucleus.Infrastructure/Adapters/Teams/` (and similar for Slack, Discord, Email if prototyped)
    *   `Architecture/ClientAdapters/ARCHITECTURE_ADAPTERS_TEAMS.md` (and similar)
    *   Much of `Architecture/10_ARCHITECTURE_API.md` (as the API is now distributed)
    *   DTOs like `AdapterRequest.cs`, `AdapterResponse.cs` in `Nucleus.Abstractions` will likely be removed or their concepts mapped to M365 `Activity` types.

## 6. Artifact Handling (Reference Construction in M365 Agents)

The core principle of reference-based artifact handling remains.
*   The **Nucleus M365 Persona Agent** will receive file/attachment information from the specific channel via the M365 Agents SDK (e.g., in the `Activity.Attachments` property).
*   The M365 Agent will be responsible for translating this platform-provided information into a robust `ArtifactReference` (or a similar structured DTO) that the backend `Nucleus_FileAccess_McpServer` (which uses `IArtifactProvider`) can understand and use to ephemerally retrieve content.
*   This `ArtifactReference` is then passed as a parameter in an MCP call to the relevant Nucleus backend tool.

---

_This architecture document now focuses on user and system interaction via Nucleus M365 Persona Agents, which in turn utilize backend Nucleus capabilities exposed as MCP Tools, emphasizing a distributed, modern agentic architecture._
